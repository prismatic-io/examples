category: ""
configPages:
  - elements:
      - type: configVar
        value: Salesforce Connection
      - type: configVar
        value: Acme API Endpoint
    name: Configuration
    tagline: ""
  - elements:
      - type: configVar
        value: Salesforce Account Field Mapping
    name: Map Fields
    tagline: Map Fields from Salesforce to Acme
    userLevelConfigured: false
definitionVersion: 7
description: ""
documentation: >-
  # Salesforce Example


  This example integration is broken into three flows.


  ## Initial Account Import


  This flow runs when an instance is first deployed. It uses SOQL to query pages
  of **Account** records, and for each page it loops over results and posts
  those results to "Acme".


  Account records are translated using the field mapping values the customer
  selected with a code step.


  ## Process Salesforce Outbound Messages


  This flow receives notifications when an **Account** is changed. It fetches
  the modified account, maps data from SFDC to a format that "Acme Corp"
  understands, and sends the request to Acme.


  The subscription to a Salesforce Flow and Outbound Message are performed on
  instance deploy automatically. Those resources are deleted on instance
  removal.


  ## Create Account from Acme


  This flow provides bi-directional data flow from SFDC and Acme. Acme can send
  a webhook request to this flow via its webhook URL, and a corresponding
  **Account** will be created in SFDC. A payload should look like this:


  ```javascript

  {
    "acct_name": "My New Account",
    "revenue": 12345
  }

  ```
endpointType: flow_specific
flows:
  - description: >-
      Loop over a paginated set of Account records in Salesforce, sending each
      to Acme
    endpointSecurityType: customer_optional
    isSynchronous: false
    name: Initial Account Import
    steps:
      - action:
          key: instanceDeploy
          component:
            isPublic: true
            key: management-triggers
            version: LATEST
        description: ""
        inputs: {}
        isTrigger: true
        name: Initial Account Import Trigger
      - action:
          key: loopNTimes
          component:
            isPublic: true
            key: loop
            version: LATEST
        description: ""
        inputs:
          iterationCount:
            type: value
            value: "20"
        name: Loop N Times
        steps:
          - action:
              key: getExecutionValue
              component:
                isPublic: true
                key: persist-data
                version: LATEST
            description: ""
            inputs:
              defaultValueInput:
                type: value
                value: "0"
              keyInput:
                type: value
                value: SOQL_OFFSET
            name: Execution - Get Value
          - action:
              key: query
              component:
                isPublic: true
                key: salesforce
                version: LATEST
            description: ""
            inputs:
              connection:
                type: configVar
                value: Salesforce Connection
              queryString:
                type: template
                value: >-
                  SELECT Id, Name, AnnualRevenue FROM Account LIMIT 50 OFFSET
                  {{$executionGetValue.results}}
              version:
                type: value
                value: "51.0"
            name: Salesforce Query
          - action:
              key: branchOnExpression
              component:
                isPublic: true
                key: branch
                version: LATEST
            branches:
              - name: No records returned
                steps:
                  - action:
                      key: breakLoop
                      component:
                        isPublic: true
                        key: loop
                        version: LATEST
                    description: ""
                    inputs: {}
                    name: Break Loop
              - name: Else
                steps: []
            description: ""
            inputs:
              conditions:
                type: complex
                value:
                  - name: No records returned
                    type: complex
                    value:
                      - and
                      - - isEmpty
                        - name: ""
                          type: reference
                          value: salesforceQuery.results.records
                        - name: ""
                          type: value
                          value: ""
            name: Branch on Expression
          - action:
              key: loopOverItems
              component:
                isPublic: true
                key: loop
                version: LATEST
            description: ""
            inputs:
              items:
                type: reference
                value: salesforceQuery.results.records
            name: Loop Over Accounts
            steps:
              - action:
                  key: runCode
                  component:
                    isPublic: true
                    key: code
                    version: LATEST
                description: ""
                inputs:
                  code:
                    type: value
                    value: >
                      module.exports = async ({ logger, configVars },
                      stepResults) => {
                        const sfdcAccount = stepResults.loopOverAccounts.currentItem;
                        const mapping = configVars["Salesforce Account Field Mapping"];
                        const mappedFields = mapping.reduce(
                          (acc, { source, destination }) => ({
                            [destination]: sfdcAccount[source],
                            ...acc,
                          }),
                          {},
                        );
                        return { data: mappedFields };
                      };
                name: Map Fields to Acme Format
              - action:
                  key: httpPost
                  component:
                    isPublic: true
                    key: http
                    version: LATEST
                description: ""
                inputs:
                  connection:
                    type: configVar
                    value: ""
                  data:
                    type: reference
                    value: mapFieldsToAcmeFormat.results
                  debugRequest:
                    type: value
                    value: "false"
                  headers:
                    type: complex
                    value:
                      - name: Content-Type
                        type: value
                        value: application/json
                  ignoreSslErrors:
                    type: value
                    value: "false"
                  includeFullResponse:
                    type: value
                    value: "false"
                  maxRetries:
                    type: value
                    value: "0"
                  queryParams:
                    type: complex
                    value: []
                  responseType:
                    type: value
                    value: json
                  retryDelayMS:
                    type: value
                    value: "0"
                  retryOnAllErrors:
                    type: value
                    value: "false"
                  timeout:
                    type: value
                    value: ""
                  url:
                    type: configVar
                    value: Acme API Endpoint
                  useExponentialBackoff:
                    type: value
                    value: "false"
                name: Post Account to Acme
          - action:
              key: incrementExecutionValue
              component:
                isPublic: true
                key: persist-data
                version: LATEST
            description: ""
            inputs:
              amountInput:
                type: value
                value: "50"
              keyInput:
                type: value
                value: SOQL_OFFSET
            name: Execution - Increment Value
  - description: >-
      Receive a notification whenever an Account is created or updated in
      Salesforce, and send a corresponding request to Acme.
    endpointSecurityType: customer_optional
    isSynchronous: false
    name: Process Salesforce Outbound Messages
    steps:
      - action:
          key: flowOutboundMessageTrigger
          component:
            isPublic: true
            key: salesforce
            version: LATEST
        description: ""
        inputs:
          connection:
            type: configVar
            value: Salesforce Connection
          fields:
            type: complex
            value: []
          prefix:
            type: value
            value: acme
          triggerObject:
            type: value
            value: Account
          triggerOn:
            type: value
            value: Create or Update
          version:
            type: value
            value: "59.0"
        isTrigger: true
        name: Process Salesforce Outbound Messages Trigger
      - action:
          key: getRecord
          component:
            isPublic: true
            key: salesforce
            version: LATEST
        description: ""
        inputs:
          connection:
            type: configVar
            value: Salesforce Connection
          recordId:
            type: reference
            value: "processSalesforceOutboundMessagesTrigger.results.body.data[0].Id"
          recordType:
            type: value
            value: Account
          version:
            type: value
            value: "51.0"
        name: Get Record
      - action:
          key: runCode
          component:
            isPublic: true
            key: code
            version: LATEST
        description: ""
        inputs:
          code:
            type: value
            value: |
              module.exports = async ({ logger, configVars }, stepResults) => {
                const sfdcAccount = stepResults.getRecord.results;
                const mapping = configVars["Salesforce Account Field Mapping"];
                const mappedFields = mapping.reduce(
                  (acc, { source, destination }) => ({
                    [destination]: sfdcAccount[source],
                    ...acc,
                  }),
                  {},
                );
                return { data: mappedFields };
              };
        name: Map Fields to Acme Format
      - action:
          key: httpPost
          component:
            isPublic: true
            key: http
            version: LATEST
        description: ""
        inputs:
          connection:
            type: configVar
            value: ""
          data:
            type: reference
            value: mapFieldsToAcmeFormat.results
          debugRequest:
            type: value
            value: "false"
          headers:
            type: complex
            value:
              - name: Content-Type
                type: value
                value: application/json
          ignoreSslErrors:
            type: value
            value: "false"
          includeFullResponse:
            type: value
            value: "false"
          maxRetries:
            type: value
            value: "0"
          queryParams:
            type: complex
            value: []
          responseType:
            type: value
            value: json
          retryDelayMS:
            type: value
            value: "0"
          retryOnAllErrors:
            type: value
            value: "false"
          timeout:
            type: value
            value: ""
          url:
            type: configVar
            value: Acme API Endpoint
          useExponentialBackoff:
            type: value
            value: "false"
        name: Send account to Acme
  - description: >-
      Send a JSON payload to this webhook URL with format {"acct_name": "My Test
      Account", "revenue": 50000} to create a new record in Salesforce.
    endpointSecurityType: customer_optional
    isSynchronous: false
    name: Create Account from Acme
    steps:
      - action:
          key: webhook
          component:
            isPublic: true
            key: webhook-triggers
            version: LATEST
        description: ""
        inputs:
          body:
            type: value
            value: ""
          contentType:
            type: value
            value: ""
          headers:
            type: complex
            value: []
          statusCode:
            type: value
            value: ""
        isTrigger: true
        name: Create Account from Acme Trigger
      - action:
          key: validateJsonSchema
          component:
            isPublic: true
            key: collection-tools
            version: LATEST
        description: ""
        inputs:
          jsonInput:
            type: reference
            value: createAccountFromAcmeTrigger.results.body.data
          jsonSchema:
            type: value
            value: |
              {
                "type": "object",
                "properties": {
                  "acct_name": { "type": "string" },
                  "revenue": { "type": "string" }
                },
                "required": ["external_id", "acct_name", "revenue"]
              }
        name: Validate JSON Schema
      - action:
          key: runCode
          component:
            isPublic: true
            key: code
            version: LATEST
        description: ""
        inputs:
          code:
            type: value
            value: |
              module.exports = async ({ configVars }, stepResults) => {
                const acmeAccount =
                  stepResults.createAccountFromAcmeTrigger.results.body.data;
                const mapping = configVars["Salesforce Account Field Mapping"];
                const result = [];
                for (const { source, destination } of mapping) {
                  if (acmeAccount[destination]) {
                    result.push({
                      key: source,
                      value: acmeAccount[destination],
                    });
                  }
                }
                return { data: result };
              };
        name: Create Salesforce Payload
      - action:
          key: createRecord
          component:
            isPublic: true
            key: salesforce
            version: LATEST
        description: ""
        inputs:
          connection:
            type: configVar
            value: Salesforce Connection
          dynamicValues:
            type: reference
            value: createSalesforcePayload.results
          fieldValues:
            type: complex
            value: []
          recordType:
            type: value
            value: Account
          version:
            type: value
            value: "51.0"
        name: Create Record
name: Salesforce Example
requiredConfigVars:
  - connection:
      key: oauth2
      component:
        isPublic: true
        key: salesforce
        version: LATEST
    dataType: connection
    inputs:
      authorizeUrl:
        meta:
          orgOnly: true
          visibleToCustomerDeployer: false
          visibleToOrgDeployer: false
        type: value
        value: "https://login.salesforce.com/services/oauth2/authorize"
      clientId:
        meta:
          orgOnly: true
          visibleToCustomerDeployer: false
          visibleToOrgDeployer: false
        type: value
        value: ""
      clientSecret:
        meta:
          orgOnly: true
          visibleToCustomerDeployer: false
          visibleToOrgDeployer: false
        type: value
        value: ""
      revokeUrl:
        meta:
          orgOnly: true
          visibleToCustomerDeployer: false
          visibleToOrgDeployer: false
        type: value
        value: "https://login.salesforce.com/services/oauth2/revoke"
      tokenUrl:
        meta:
          orgOnly: true
          visibleToCustomerDeployer: false
          visibleToOrgDeployer: false
        type: value
        value: "https://login.salesforce.com/services/oauth2/token"
    key: Salesforce Connection
    onPremiseConnectionConfig: disallowed
    orgOnly: false
  - dataSource:
      key: runCodeJsonForm
      component:
        isPublic: true
        key: code
        version: LATEST
    dataType: jsonForm
    defaultValue: ""
    inputs:
      code:
        meta:
          orgOnly: true
          visibleToCustomerDeployer: false
          visibleToOrgDeployer: false
        type: value
        value: >
          // This example field mapper is written using the code component for
          demonstration.

          // We recommend that you build a field mapper in a custom component so
          that you can

          // also fetch data from your API. See

          //
          https://prismatic.io/docs/quickstarts/field-mapping-json-forms-datasource/


          module.exports = async (context, { connection, contextValue }) => {
            const {
              token: { access_token, instance_url },
            } = connection;

            const response = await fetch(
              `${instance_url}/services/data/v60.0/sobjects/Account/describe`,
              { headers: { Authorization: `Bearer ${access_token}` } },
            );
            const { fields } = await response.json();

            // Sort fields and map to { title: string, const: string } format
            const salesforceAccountFields = fields
              .map((field) => ({ title: field.label, const: field.name }))
              .sort((a, b) => (a.title < b.title ? -1 : 1));

            const schema = {
              type: "array",
              items: {
                type: "object",
                properties: {
                  source: {
                    type: "string",
                    oneOf: salesforceAccountFields,
                  },
                  destination: {
                    type: "string",
                    oneOf: [
                      {
                        title: "Acme Account Name",
                        const: "acct_name",
                      },
                      {
                        title: "Acme Account External ID",
                        const: "external_id",
                      },
                      {
                        title: "Acme Account Annual Revenue",
                        const: "revenue",
                      },
                    ],
                  },
                },
                required: ["source", "destination"],
              },
            };

            const uiSchema = {
              type: "Control",
              label: "Salesforce / Acme Account Field Mapper",
              scope: "#",
              options: {
                layout: "Accordion",
                detail: {
                  type: "HorizontalLayout",
                  elements: [
                    {
                      type: "Control",
                      scope: "#/properties/source",
                      options: {
                        autocomplete: true,
                      },
                      label: "Salesforce Field",
                    },
                    {
                      type: "Control",
                      scope: "#/properties/destination",
                      options: {
                        autocomplete: true,
                      },
                      label: "Acme Field",
                    },
                  ],
                },
              },
            };

            // A default mapping
            const data = [
              {
                source: "Id",
                destination: "external_id",
              },
              {
                source: "Name",
                destination: "acct_name",
              },
              {
                source: "AnnualRevenue",
                destination: "revenue",
              },
            ];

            return Promise.resolve({
              schema,
              uiSchema,
              data,
            });
          };
      connection:
        meta:
          orgOnly: true
          visibleToCustomerDeployer: false
          visibleToOrgDeployer: false
        type: configVar
        value: Salesforce Connection
      contextValue:
        meta:
          orgOnly: true
          visibleToCustomerDeployer: false
          visibleToOrgDeployer: false
        type: value
        value: ""
    key: Salesforce Account Field Mapping
    orgOnly: false
  - dataType: string
    defaultValue: "https://postman-echo.com/post"
    key: Acme API Endpoint
    orgOnly: false
