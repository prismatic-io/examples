/**
 * This file was automatically generated by spectral.
 * Any changes made will be overwritten.
 */
import type { Connection } from "@prismatic-io/spectral";
import { requireContext } from "@prismatic-io/spectral/dist/serverTypes";

export interface PostEphemeralMessageValues {
  /**
   * Channel Name or ID
   *
   */
  channelName: string;
  /**
   * User Id
   *
   */
  userId: string;
  /**
   * Bot Username
   *
   */
  username?: string;
  /**
   * Message
   *
   */
  message: string;
  /**
   * Connection
   *
   */
  connection: Connection;
}

/**
 * Post Ephemeral Message
 *
 * @description Post an ephemeral message to a user or channel
 */
export const postEphemeralMessage = {
  key: "postEphemeralMessage",
  perform: async <TReturn>(
    values: PostEphemeralMessageValues
  ): Promise<TReturn> => {
    const context = requireContext();
    return (await context.components.slack.postEphemeralMessage({
      ...values,
    })) as TReturn;
  },
  inputs: {
    channelName: {
      inputType: "string",
      collection: undefined,
      default: ``,
      required: true,
    },
    userId: {
      inputType: "string",
      collection: undefined,
      default: ``,
      required: true,
    },
    username: {
      inputType: "string",
      collection: undefined,
      default: ``,
    },
    message: {
      inputType: "text",
      collection: undefined,
      default: ``,
      required: true,
    },
    connection: {
      inputType: "connection",
      collection: undefined,
      default: `null`,
      required: true,
    },
  },
  examplePayload: { data: { ok: true, message_ts: "1502210682.580145" } },
} as const;
