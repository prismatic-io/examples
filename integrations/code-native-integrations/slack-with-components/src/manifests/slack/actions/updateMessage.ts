/**
 * This file was automatically generated by spectral.
 * Any changes made will be overwritten.
 */
import type { Connection } from "@prismatic-io/spectral";
import { requireContext } from "@prismatic-io/spectral/dist/serverTypes";

export interface UpdateMessageValues {
  /**
   * Message
   *
   */
  message: string;
  /**
   * Message Id
   *
   */
  messageId: string;
  /**
   * Channel ID
   *
   */
  channelId: string;
  /**
   * Connection
   *
   */
  connection: Connection;
}

/**
 * Update Message
 *
 * @description Update the contents of an existing message
 */
export const updateMessage = {
  key: "updateMessage",
  perform: async <TReturn>(values: UpdateMessageValues): Promise<TReturn> => {
    const context = requireContext();
    return (await context.components.slack.updateMessage({
      ...values,
    })) as TReturn;
  },
  inputs: {
    message: {
      inputType: "text",
      collection: undefined,
      default: ``,
      required: true,
    },
    messageId: {
      inputType: "string",
      collection: undefined,
      default: ``,
      required: true,
    },
    channelId: {
      inputType: "string",
      collection: undefined,
      default: ``,
      required: true,
    },
    connection: {
      inputType: "connection",
      collection: undefined,
      default: `null`,
      required: true,
    },
  },
  examplePayload: {
    data: {
      ok: true,
      ts: "1401383885.000061",
      text: "Updated text you carefully authored",
      channel: "C123ABC456",
      message: {
        text: "Updated text you carefully authored",
        user: "U34567890",
      },
    },
  },
} as const;
