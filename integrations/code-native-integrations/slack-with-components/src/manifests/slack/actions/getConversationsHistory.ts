/**
 * This file was automatically generated by spectral.
 * Any changes made will be overwritten.
 */
import type { Connection } from "@prismatic-io/spectral";
import { requireContext } from "@prismatic-io/spectral/dist/serverTypes";

export interface GetConversationsHistoryValues {
  /**
   * Channel Name or ID
   *
   */
  channelName: string;
  /**
   * Fetch All
   *
   * @default false
   */
  fetchAll?: boolean;
  /**
   * Limit
   *
   */
  limit?: string;
  /**
   * Cursor
   *
   */
  cursor?: string;
  /**
   * Include All Metadata
   *
   * @default false
   */
  includeAllMetadata?: boolean;
  /**
   * Inclusive
   *
   * @default false
   */
  inclusive?: boolean;
  /**
   * Latest
   *
   */
  latest?: string;
  /**
   * Oldest
   *
   */
  oldest?: string;
  /**
   * Connection
   *
   */
  connection: Connection;
}

/**
 * Get Conversation History
 *
 * @description Get the history of a conversation
 */
export const getConversationsHistory = {
  key: "getConversationsHistory",
  perform: async <TReturn>(
    values: GetConversationsHistoryValues
  ): Promise<TReturn> => {
    const context = requireContext();
    return (await context.components.slack.getConversationsHistory({
      ...values,
    })) as TReturn;
  },
  inputs: {
    channelName: {
      inputType: "string",
      collection: undefined,
      default: ``,
      required: true,
    },
    fetchAll: {
      inputType: "boolean",
      collection: undefined,
      default: `false`,
    },
    limit: {
      inputType: "string",
      collection: undefined,
      default: ``,
    },
    cursor: {
      inputType: "string",
      collection: undefined,
      default: ``,
    },
    includeAllMetadata: {
      inputType: "boolean",
      collection: undefined,
      default: `false`,
    },
    inclusive: {
      inputType: "boolean",
      collection: undefined,
      default: `false`,
    },
    latest: {
      inputType: "string",
      collection: undefined,
      default: ``,
    },
    oldest: {
      inputType: "string",
      collection: undefined,
      default: ``,
    },
    connection: {
      inputType: "connection",
      collection: undefined,
      default: `null`,
      required: true,
    },
  },
  examplePayload: {
    data: {
      ok: true,
      messages: [
        {
          ts: "166149417.178179",
          team: "TH0GJM0M8",
          text: "hello world",
          type: "message",
          user: "U01QFFSE2QK",
          client_msg_id: "123123-123123-123123",
        },
      ],
    },
  },
} as const;
