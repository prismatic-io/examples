/**
 * This file was automatically generated by spectral.
 * Any changes made will be overwritten.
 */
import type { Connection } from "@prismatic-io/spectral";
import { requireContext } from "@prismatic-io/spectral/dist/serverTypes";

export interface RawRequestValues {
  /**
   * Connection
   *
   */
  connection: Connection;
  /**
   * URL
   *
   */
  url: string;
  /**
   * Method
   *
   */
  method: string;
  /**
   * Data
   *
   */
  data?: string;
  /**
   * Form Data
   *
   */
  formData?: Record<string, string> | Array<{ key: string; value: string }>;
  /**
   * File Data
   *
   */
  fileData?: Record<string, string> | Array<{ key: string; value: string }>;
  /**
   * File Data File Names
   *
   */
  fileDataFileNames?:
    | Record<string, string>
    | Array<{ key: string; value: string }>;
  /**
   * Query Parameter
   *
   */
  queryParams?: Record<string, string> | Array<{ key: string; value: string }>;
  /**
   * Header
   *
   */
  headers?: Record<string, string> | Array<{ key: string; value: string }>;
  /**
   * Response Type
   *
   * @default json
   */
  responseType?: string;
  /**
   * Timeout
   *
   */
  timeout?: string;
  /**
   * Retry Delay (ms)
   *
   * @default 0
   */
  retryDelayMS?: string;
  /**
   * Retry On All Errors
   *
   * @default false
   */
  retryAllErrors?: boolean;
  /**
   * Max Retry Count
   *
   * @default 0
   */
  maxRetries?: string;
  /**
   * Use Exponential Backoff
   *
   * @default false
   */
  useExponentialBackoff?: boolean;
}

/**
 * Raw Request
 *
 * @description Send raw HTTP request to Slack
 */
export const rawRequest = {
  key: "rawRequest",
  perform: async <TReturn>(values: RawRequestValues): Promise<TReturn> => {
    const context = requireContext();
    return (await context.components.slack.rawRequest({
      ...values,
    })) as TReturn;
  },
  inputs: {
    connection: {
      inputType: "connection",
      collection: undefined,
      default: `null`,
      required: true,
    },
    url: {
      inputType: "string",
      collection: undefined,
      default: ``,
      required: true,
    },
    method: {
      inputType: "string",
      collection: undefined,
      default: ``,
      required: true,
    },
    data: {
      inputType: "string",
      collection: undefined,
      default: ``,
    },
    formData: {
      inputType: "string",
      collection: "keyvaluelist",
      default: ``,
    },
    fileData: {
      inputType: "string",
      collection: "keyvaluelist",
      default: ``,
    },
    fileDataFileNames: {
      inputType: "string",
      collection: "keyvaluelist",
      default: ``,
    },
    queryParams: {
      inputType: "string",
      collection: "keyvaluelist",
      default: ``,
    },
    headers: {
      inputType: "string",
      collection: "keyvaluelist",
      default: ``,
    },
    responseType: {
      inputType: "string",
      collection: undefined,
      default: `json`,
    },
    timeout: {
      inputType: "string",
      collection: undefined,
      default: ``,
    },
    retryDelayMS: {
      inputType: "string",
      collection: undefined,
      default: `0`,
    },
    retryAllErrors: {
      inputType: "boolean",
      collection: undefined,
      default: `false`,
    },
    maxRetries: {
      inputType: "string",
      collection: undefined,
      default: `0`,
    },
    useExponentialBackoff: {
      inputType: "boolean",
      collection: undefined,
      default: `false`,
    },
  },
  examplePayload: {},
} as const;
