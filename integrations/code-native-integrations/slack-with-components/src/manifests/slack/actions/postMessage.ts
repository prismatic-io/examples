/**
 * This file was automatically generated by spectral.
 * Any changes made will be overwritten.
 */
import type { Connection } from "@prismatic-io/spectral";
import { requireContext } from "@prismatic-io/spectral/dist/serverTypes";

export interface PostMessageValues {
  /**
   * Message
   *
   */
  message: string;
  /**
   * Channel Name or ID
   *
   */
  channelName: string;
  /**
   * Bot Username
   *
   */
  username?: string;
  /**
   * Connection
   *
   */
  connection: Connection;
  /**
   * Message Id
   *
   */
  messageId?: string;
}

/**
 * Post Message
 *
 * @description Post a message to a slack channel
 */
export const postMessage = {
  key: "postMessage",
  perform: async <TReturn>(values: PostMessageValues): Promise<TReturn> => {
    const context = requireContext();
    return (await context.components.slack.postMessage({
      ...values,
    })) as TReturn;
  },
  inputs: {
    message: {
      inputType: "text",
      collection: undefined,
      default: ``,
      required: true,
    },
    channelName: {
      inputType: "string",
      collection: undefined,
      default: ``,
      required: true,
    },
    username: {
      inputType: "string",
      collection: undefined,
      default: ``,
    },
    connection: {
      inputType: "connection",
      collection: undefined,
      default: `null`,
      required: true,
    },
    messageId: {
      inputType: "string",
      collection: undefined,
      default: ``,
    },
  },
  examplePayload: {
    data: {
      ok: true,
      ts: "1646951430.367539",
      channel: "C011B7U3R9U",
      message: {
        ts: "1646951430.367539",
        text: "The message I sent",
        type: "message",
        bot_id: "B036D2DCT54",
        subtype: "bot_message",
        username: "My Slack App",
      },
      response_metadata: {
        scopes: [
          "identify",
          "chat:write",
          "chat:write.public",
          "chat.write.customize",
        ],
        acceptedScopes: ["chat:write"],
      },
    },
  },
} as const;
