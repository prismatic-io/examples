/**
 * This file was automatically generated by spectral.
 * Any changes made will be overwritten.
 */
import type { Connection } from "@prismatic-io/spectral";
import { requireContext } from "@prismatic-io/spectral/dist/serverTypes";

export interface ListUsersValues {
  /**
   * Fetch All
   *
   * @default false
   */
  fetchAll?: boolean;
  /**
   * Limit
   *
   */
  limit?: string;
  /**
   * Cursor
   *
   */
  cursor?: string;
  /**
   * Team Id
   *
   */
  teamId?: string;
  /**
   * Connection
   *
   */
  connection: Connection;
}

/**
 * List Users
 *
 * @description List Users
 */
export const listUsers = {
  key: "listUsers",
  perform: async <TReturn>(values: ListUsersValues): Promise<TReturn> => {
    const context = requireContext();
    return (await context.components.slack.listUsers({ ...values })) as TReturn;
  },
  inputs: {
    fetchAll: {
      inputType: "boolean",
      collection: undefined,
      default: `false`,
    },
    limit: {
      inputType: "string",
      collection: undefined,
      default: ``,
    },
    cursor: {
      inputType: "string",
      collection: undefined,
      default: ``,
    },
    teamId: {
      inputType: "string",
      collection: undefined,
      default: ``,
    },
    connection: {
      inputType: "connection",
      collection: undefined,
      default: `null`,
      required: true,
    },
  },
  examplePayload: {
    data: {
      ok: true,
      members: [
        {
          id: "Exmple",
          name: "Example",
          color: "37373",
          deleted: false,
          profile: {
            team: "example",
            email: "example",
            phone: "example",
            skype: "example",
            title: "example",
            real_name: "Slackbots",
            first_name: "example",
            display_name: "example",
            always_active: true,
            real_name_normalized: "example",
          },
          team_id: "34700c09vs0zx",
        },
      ],
      response_metadata: {
        scopes: ["admin", "idetify", "channels:read"],
        next_cursor: "",
      },
    },
  },
} as const;
