/**
 * This file was automatically generated by spectral.
 * Any changes made will be overwritten.
 */
import type { Connection } from "@prismatic-io/spectral";
import { requireContext } from "@prismatic-io/spectral/dist/serverTypes";

export interface ListConversationsValues {
  /**
   * Team Id
   *
   */
  teamId?: string;
  /**
   * Limit
   *
   */
  limit?: string;
  /**
   * Cursor
   *
   */
  cursor?: string;
  /**
   * Fetch All
   *
   * @default false
   */
  fetchAll?: boolean;
  /**
   * Exclude Archived
   *
   * @default false
   */
  excludeArchived?: boolean;
  /**
   * Connection
   *
   */
  connection: Connection;
  /**
   * Include public channels?
   *
   * @default true
   */
  includePublicChannels?: boolean;
  /**
   * Include private channels?
   *
   * @default false
   */
  includePrivateChannels?: boolean;
  /**
   * Include multi-party IM (mpim) channels?
   *
   * @default false
   */
  includeMultiPartyImchannels?: boolean;
  /**
   * Include IM channels?
   *
   * @default false
   */
  includeImChannels?: boolean;
}

/**
 * List Conversations
 *
 * @description List all conversations
 */
export const listConversations = {
  key: "listConversations",
  perform: async <TReturn>(
    values: ListConversationsValues
  ): Promise<TReturn> => {
    const context = requireContext();
    return (await context.components.slack.listConversations({
      ...values,
    })) as TReturn;
  },
  inputs: {
    teamId: {
      inputType: "string",
      collection: undefined,
      default: ``,
    },
    limit: {
      inputType: "string",
      collection: undefined,
      default: ``,
    },
    cursor: {
      inputType: "string",
      collection: undefined,
      default: ``,
    },
    fetchAll: {
      inputType: "boolean",
      collection: undefined,
      default: `false`,
    },
    excludeArchived: {
      inputType: "boolean",
      collection: undefined,
      default: `false`,
    },
    connection: {
      inputType: "connection",
      collection: undefined,
      default: `null`,
      required: true,
    },
    includePublicChannels: {
      inputType: "boolean",
      collection: undefined,
      default: `true`,
    },
    includePrivateChannels: {
      inputType: "boolean",
      collection: undefined,
      default: `false`,
    },
    includeMultiPartyImchannels: {
      inputType: "boolean",
      collection: undefined,
      default: `false`,
    },
    includeImChannels: {
      inputType: "boolean",
      collection: undefined,
      default: `false`,
    },
  },
  examplePayload: {
    data: {
      ok: true,
      channels: [
        {
          id: "COZ7e3d",
          name: "example channel",
          is_im: false,
          created: 6426934241,
          creator: "example",
          purpose: {
            value: "This channel was created for an example response.",
          },
          is_group: false,
          unlinked: 0,
          is_channel: true,
          is_private: false,
          is_archived: false,
          name_normalized: "example channel",
          shared_team_ids: ["TW2oP78"],
        },
      ],
    },
  },
} as const;
