/**
 * This file was automatically generated by spectral.
 * Any changes made will be overwritten.
 */
import type { Connection } from "@prismatic-io/spectral";
import { requireContext } from "@prismatic-io/spectral/dist/serverTypes";

export interface PostWebhookBlockMessageValues {
  /**
   * Connection
   *
   */
  connection: Connection;
  /**
   * Alt Message
   *
   */
  message: string;
  /**
   * Blocks
   *
   * @default {\\n  \\"blocks\\": [\\n    {\\n      \\"type\\": \\"section\\",\\n      \\"text\\": {\\n        \\"type\\": \\"plain_text\\",\\n        \\"text\\": \\"Hello world\\"\\n      }\\n    }\\n  ]\\n}
   */
  blocks?: string;
}

/**
 * Slack Block Message From Webhook
 *
 * @description Post a block formatted message to a Slack channel from a webhook URL
 */
export const postWebhookBlockMessage = {
  key: "postWebhookBlockMessage",
  perform: async <TReturn>(
    values: PostWebhookBlockMessageValues
  ): Promise<TReturn> => {
    const context = requireContext();
    return (await context.components.slack.postWebhookBlockMessage({
      ...values,
    })) as TReturn;
  },
  inputs: {
    connection: {
      inputType: "connection",
      collection: undefined,
      default: `null`,
      required: true,
    },
    message: {
      inputType: "text",
      collection: undefined,
      default: ``,
      required: true,
    },
    blocks: {
      inputType: "code",
      collection: undefined,
      default: `{
  "blocks": [
    {
      "type": "section",
      "text": {
        "type": "plain_text",
        "text": "Hello world"
      }
    }
  ]
}`,
    },
  },
  examplePayload: { data: { text: "ok" } },
} as const;
