/**
 * This file was automatically generated by spectral.
 * Any changes made will be overwritten.
 */
import { connectionConfigVar } from "@prismatic-io/spectral";
import type {
  ConfigVarExpression,
  ConfigVarVisibility,
} from "@prismatic-io/spectral";

export interface Oauth2Values {
  /**
   * Authorize URL
   *
   * @default https:\/\/slack.com\/oauth\/v2\/authorize
   */
  authorizeUrl?: string;
  /**
   * Token URL
   *
   * @default https:\/\/slack.com\/api\/oauth.v2.access
   */
  tokenUrl?: string;
  /**
   * Revoke URL
   *
   * @default https:\/\/slack.com\/api\/auth.revoke
   */
  revokeUrl?: string;
  /**
   * Scopes (Bot)
   *
   * @default chat:write chat:write.public chat:write.customize channels:read groups:read im:read mpim:read
   */
  scopes?: string;
  /**
   * Client ID
   *
   */
  clientId: string;
  /**
   * Client Secret
   *
   */
  clientSecret: string;
  /**
   * Signing Secret
   *
   */
  signingSecret: string;
  /**
   * Is User
   *
   * @default false
   */
  isUser?: boolean;
}

/**
 * Slack OAuth 2.0
 *
 * @comments Authenticate requests to Slack using values obtained from the developer console.
 */
export const oauth2 = {
  key: "oauth2",
  perform: (_values: Oauth2Values): Promise<void> => Promise.resolve(),
  inputs: {
    authorizeUrl: {
      inputType: "string",
      collection: undefined,
      default: `https:\/\/slack.com\/oauth\/v2\/authorize`,
    },
    tokenUrl: {
      inputType: "string",
      collection: undefined,
      default: `https:\/\/slack.com\/api\/oauth.v2.access`,
    },
    revokeUrl: {
      inputType: "string",
      collection: undefined,
      default: `https:\/\/slack.com\/api\/auth.revoke`,
    },
    scopes: {
      inputType: "string",
      collection: undefined,
      default: `chat:write chat:write.public chat:write.customize channels:read groups:read im:read mpim:read`,
    },
    clientId: {
      inputType: "string",
      collection: undefined,
      default: ``,
      required: true,
    },
    clientSecret: {
      inputType: "password",
      collection: undefined,
      default: ``,
      required: true,
    },
    signingSecret: {
      inputType: "password",
      collection: undefined,
      default: ``,
      required: true,
    },
    isUser: {
      inputType: "boolean",
      collection: undefined,
      default: `false`,
    },
  },
} as const;

/**
 * Slack OAuth 2.0 Connection Helper
 *
 * @comments Helper for direct usage in config wizard definitions.
 */
export const slackOauth2 = (
  stableKey: string,
  values: {
    authorizeUrl?: (
      | {
          value: string;
        }
      | ConfigVarExpression
    ) &
      ConfigVarVisibility & { writeOnly?: true };
    tokenUrl?: (
      | {
          value: string;
        }
      | ConfigVarExpression
    ) &
      ConfigVarVisibility & { writeOnly?: true };
    revokeUrl?: (
      | {
          value: string;
        }
      | ConfigVarExpression
    ) &
      ConfigVarVisibility & { writeOnly?: true };
    scopes?: (
      | {
          value: string;
        }
      | ConfigVarExpression
    ) &
      ConfigVarVisibility & { writeOnly?: true };
    clientId: (
      | {
          value: string;
        }
      | ConfigVarExpression
    ) &
      ConfigVarVisibility & { writeOnly?: true };
    clientSecret: (
      | {
          value: string;
        }
      | ConfigVarExpression
    ) &
      ConfigVarVisibility & { writeOnly?: true };
    signingSecret: (
      | {
          value: string;
        }
      | ConfigVarExpression
    ) &
      ConfigVarVisibility & { writeOnly?: true };
    isUser?: (
      | {
          value: boolean;
        }
      | ConfigVarExpression
    ) &
      ConfigVarVisibility & { writeOnly?: true };
  }
) => {
  return connectionConfigVar({
    dataType: "connection",
    stableKey,
    connection: {
      component: "slack",
      key: "oauth2",
      values,
    },
  });
};
